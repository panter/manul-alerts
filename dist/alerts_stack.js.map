{"version":3,"sources":["../src/alerts_stack.jsx"],"names":["transformAlerts","alerts","defaultStyles","stylesError","map","onActionClick","actionLabel","type","alert","action","onClick","AlertStack","dismissAlert","styles","composer","onData","context","Alerts","i18n","list","fallbackOptions","useFallbackForMissing","showKeyForMissing","nullKeyValue","translate","keyOrKeyArray","translateProps","disableI18n","t","translateAlert","message","title","depsMapper","actions","dismiss"],"mappings":";;;;;;;;;;;;;AAAA;;;;AACA;;AAKA;;AAEA;;;;;;;;AAGA;AACA,IAAMA,kBAAkB,SAAlBA,eAAkB,CAACC,MAAD,EAASC,aAAT,EAAwBC,WAAxB;AAAA,SACtBF,OAAOG,GAAP,CAAW;AAAA,QAAGC,aAAH,QAAGA,aAAH;AAAA,QAAkBC,WAAlB,QAAkBA,WAAlB;AAAA,QAA+BC,IAA/B,QAA+BA,IAA/B;AAAA,QAAwCC,KAAxC;;AAAA,iCAEJN,aAFI,EAGHK,SAAS,OAAT,IAAoBJ,WAHjB,GAKNK,KALM;AAMTC,cAAQH,WANC;AAOTI,eAASL;AAPA;AAAA,GAAX,CADsB;AAAA,CAAxB;AAUA,IAAMM,aAAa,SAAbA,UAAa;AAAA,MAAGC,YAAH,SAAGA,YAAH;AAAA,MAAiBX,MAAjB,SAAiBA,MAAjB;AAAA,MAAyBY,MAAzB,SAAyBA,MAAzB;AAAA,MAAiCV,WAAjC,SAAiCA,WAAjC;AAAA,SACjB;AACE,mBAAeH,gBAAgBC,MAAhB,EAAwBY,MAAxB,EAAgCV,WAAhC,CADjB;AAEE,eAAWS;AAFb,IADiB;AAAA,CAAnB;;AAOO,IAAME,WAAW,SAAXA,QAAW,QAAcC,MAAd,EAAyB;AAAA,MAAtBC,OAAsB,SAAtBA,OAAsB;;AAAA,iBACtBA,SADsB;AAAA,MACvCC,MADuC,YACvCA,MADuC;AAAA,MAC/BC,IAD+B,YAC/BA,IAD+B;;AAE/C,MAAMjB,SAASgB,OAAOE,IAAP,EAAf;AACA;AACA;AACA,MAAMC,kBAAkB;AACtBC,2BAAuB,IADD;AAEtBC,uBAAmB,IAFG;AAGtBC,kBAAc,IAHQ,CAGF;AAHE,GAAxB;AAKA,MAAMC,YAAY,SAAZA,SAAY,CAACC,aAAD,EAAgBC,cAAhB,EAAgCC,WAAhC,EAAgD;AAChE,QAAIA,WAAJ,EAAiB;AACf,aAAOF,aAAP;AACD;AACD,WAAOP,KAAKU,CAAL,CAAOH,aAAP,EAAsBC,cAAtB,EAAsCN,eAAtC,CAAP;AACD,GALD;AAMA,MAAMS,iBAAiB,SAAjBA,cAAiB;AAAA,QACrBF,WADqB,SACrBA,WADqB;AAAA,QAErBG,OAFqB,SAErBA,OAFqB;AAAA,QAGrBxB,WAHqB,SAGrBA,WAHqB;AAAA,QAIrByB,KAJqB,SAIrBA,KAJqB;AAAA,QAKlBvB,KALkB;;AAAA,wBAOlBA,KAPkB;AAQrBsB,eAASN,UAAUM,OAAV,EAAmBtB,KAAnB,EAA0BmB,WAA1B,CARY;AASrBI,aAAOP,UAAUO,KAAV,EAAiBvB,KAAjB,EAAwBmB,WAAxB,CATc;AAUrBrB,mBAAakB,UAAUlB,WAAV,EAAuBE,KAAvB,EAA8BmB,WAA9B;AAVQ;AAAA,GAAvB;AAYA;AACAZ,SAAO,IAAP,EAAa,EAAEd,QAAQA,OAAOG,GAAP,CAAWyB,cAAX,CAAV,EAAb;AACD,CA9BM;;;AAgCA,IAAMG,kCAAa,SAAbA,UAAa,CAAChB,SAAD,EAAUiB,OAAV;AAAA,SAAuB;AAC/CjB,aAAS;AAAA,aAAMA,SAAN;AAAA,KADsC;AAE/CJ,kBAAcqB,QAAQhC,MAAR,CAAeiC;AAFkB,GAAvB;AAAA,CAAnB;;kBAKQ,4BACb,oCAAmBpB,QAAnB,CADa,EAEb,yBAAQkB,UAAR,CAFa,kBAIbrB,UAJa,C","file":"alerts_stack.js","sourcesContent":["import React from 'react';\nimport {\n  useDeps,\n  composeAll,\n} from '@storybook/mantra-core';\n\nimport { NotificationStack as ReactNotificationStack } from 'react-notification';\nimport { pure } from 'recompose';\nimport composeWithTracker from './utils/compose_with_tracker';\n\n\n// some aliassing for ReactNotificationStack\nconst transformAlerts = (alerts, defaultStyles, stylesError) =>\n  alerts.map(({ onActionClick, actionLabel, type, ...alert }) => ({\n    ...{\n      ...defaultStyles,\n      ...(type === 'error' && stylesError),\n    },\n    ...alert,\n    action: actionLabel,\n    onClick: onActionClick,\n  }));\nconst AlertStack = ({ dismissAlert, alerts, styles, stylesError }) => (\n  <ReactNotificationStack\n    notifications={transformAlerts(alerts, styles, stylesError)}\n    onDismiss={dismissAlert}\n  />\n);\n\nexport const composer = ({ context }, onData) => {\n  const { Alerts, i18n } = context();\n  const alerts = Alerts.list();\n  // we enforce translations-fallbacks here, because it is not a good idea\n  // to show empty error message\n  const fallbackOptions = {\n    useFallbackForMissing: true,\n    showKeyForMissing: true,\n    nullKeyValue: null, // when a key is not given, dont show anything\n  };\n  const translate = (keyOrKeyArray, translateProps, disableI18n) => {\n    if (disableI18n) {\n      return keyOrKeyArray;\n    }\n    return i18n.t(keyOrKeyArray, translateProps, fallbackOptions);\n  };\n  const translateAlert = ({\n    disableI18n,\n    message,\n    actionLabel,\n    title,\n    ...alert\n  }) => ({\n    ...alert,\n    message: translate(message, alert, disableI18n),\n    title: translate(title, alert, disableI18n),\n    actionLabel: translate(actionLabel, alert, disableI18n),\n  });\n  // translate alerts\n  onData(null, { alerts: alerts.map(translateAlert) });\n};\n\nexport const depsMapper = (context, actions) => ({\n  context: () => context,\n  dismissAlert: actions.alerts.dismiss,\n});\n\nexport default composeAll(\n  composeWithTracker(composer),\n  useDeps(depsMapper),\n  pure,\n)(AlertStack);\n"]}